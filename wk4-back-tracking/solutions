Problem 1
Leetcode 90: Subsets II

class Solution(object):
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if not nums:
            return []
        res = [[]]
        def dfs(nums,i,temp):
            if not temp in res:
                res.append(temp)
            for j in xrange(i, len(nums)):
                if j > i and nums[j] == nums[j-1]:
                    continue
                dfs(nums,j+1,temp+[nums[j]])
        nums.sort()        
        dfs(nums,0,[])
        
        return res


Problem 2
Leetcode 52: N-Queens II


Problem 3
Leetcode 216: Combination Sum III

class Solution(object):
    def combinationSum3(self, k, n):
        res = []
        self.dfs(xrange(1,10), k, n, 0, [], res)
        return res
    
    def dfs(self, nums, k, n, index, path, res):
        if k < 0 or n < 0: # backtracking 
            return 
        if k == 0 and n == 0: 
            res.append(path)
        for i in xrange(index, len(nums)):
            self.dfs(nums, k-1, n-nums[i], i+1, path+[nums[i]], res)


Problem 4
Leetcode 37: Sudoku Solver


Problem 5
Leetcode 47: Permutations II

class Solution(object):
    def permuteUnique(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        ans = [[]]
        for n in nums:
            new_ans = []
            for l in ans:
                for i in xrange(len(l)+1):
                    new_ans.append(l[:i]+[n]+l[i:])
                    if i<len(l) and l[i]==n: break              #handles duplication
            ans = new_ans
        return ans
        

Problem 6
Leetcode 131: Palindrome Partitioning

class Solution(object):
    def partition(self, s):
        res = []
        self.dfs(s, [], res)
        return res

    def dfs(self, s, path, res):
        if not s: # backtracking
            res.append(path)
        for i in xrange(1, len(s)+1):
            if self.isPar(s[:i]):
                self.dfs(s[i:], path+[s[:i]], res)

    def isPar(self, s):
        return s == s[::-1]
